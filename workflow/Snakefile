##################################################################
##                    Define input functions                    ##
##################################################################

import os
import pandas as pd

# load samples table and set samples naming
samples_df = pd.read_csv("config/samples.csv").set_index("sample", drop=False)
SAMPLES = samples_df.index.tolist()

# dictionary based input function
def fq_dict_from_sample(wildcards):
    row = samples_df.loc[wildcards.sample]
    return {
        "r1": row["fastq1"],
        "r2": row["fastq2"]
    }

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.html", sample=SAMPLES),
        "results/qc/raw/multiqc/multiqc_report.html",
        expand("results/trimmed/{sample}_R1_trimmed.fastq.gz", sample=SAMPLES),
        expand("results/trimmed/{sample}_R2_trimmed.fastq.gz", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.html", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.html", sample=SAMPLES),
        "results/qc/trimmed/multiqc/multiqc_report.html",
        expand("results/aligned/{sample}.sorted.bam", sample=SAMPLES),
        expand("results/aligned/{sample}.sorted.bam.bai", sample=SAMPLES)

##################################################################
##                     FastQC on Raw Fastqs                     ##
##################################################################

rule fastqc_raw:
    input:
        unpack(fq_dict_from_sample)
    output:
        html1="results/qc/raw/fastqc/{sample}_R1_fastqc.html",
        html2="results/qc/raw/fastqc/{sample}_R2_fastqc.html",
        zip1 ="results/qc/raw/fastqc/{sample}_R1_fastqc.zip",
        zip2 ="results/qc/raw/fastqc/{sample}_R2_fastqc.zip"
    log:
        "results/logs/fastqc/{sample}_raw.log"
    shell:
        """
        mkdir -p results/qc/raw/fastqc
        fastqc -o results/qc/raw/fastqc {input.r1} {input.r2} 2> {log}
        """

##################################################################
##                    MultiQC on Raw Fastqs                    ##
##################################################################

rule multiqc_raw:
    input:
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.zip", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/raw/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/raw/multiqc"
    log:
        "results/logs/multiqc/multiqc_raw.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/raw/fastqc -o {params.outdir} 2> {log}
        """

##################################################################
##                      Adapter Trimming                        ##
##################################################################

rule trim_adapters:
    input:
        unpack(fq_dict_from_sample)
    output:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    params:
        adapters="/usr/local/analysis/trimmomatic/0.35/lib/adapters/TruSeq3-PE-2.fa"
    log:
        "results/logs/trim/{sample}.log"
    shell:
        """
        mkdir -p results/trimmed
        cutadapt \
            -a file:{params.adapters} \
            -A file:{params.adapters} \
            -o {output.r1_trim} \
            -p {output.r2_trim} \
            {input.r1} {input.r2} 2> {log}
        """

##################################################################
##                   FastQC on Trimmed Fastqs                   ##
##################################################################

rule fastqc_trimmed:
    input:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    output:
        html3="results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.html",
        html4="results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.html",
        zip3 ="results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.zip",
        zip4 ="results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.zip"
    log:
        "results/logs/fastqc/{sample}_trimmed.log"
    shell:
        """
        mkdir -p results/qc/trimmed/fastqc
        fastqc -o results/qc/trimmed/fastqc {input.r1_trim} {input.r2_trim} 2> {log}
        """

##################################################################
##                  MultiQC on Trimmed Fastqs                  ##
##################################################################

rule multiqc_trimmed:
    input:
        expand("results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.zip", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/trimmed/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/trimmed/multiqc"
    log:
        "results/logs/multiqc/multiqc_trimmed.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/trimmed/fastqc -o {params.outdir} 2> {log}
        """

##################################################################
##                         HISAT2 Alignment                     ##
##################################################################

rule align_hisat2:
    input:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    output:
        bam="results/aligned/{sample}.sorted.bam",
        bai="results/aligned/{sample}.sorted.bam.bai"
    params:
        index="/s/cobre-dev-bio/boydk/Varshney_Lab/hisat2_index/GRCz11"
    log:
        "results/logs/alignment/{sample}.log"
    shell:
        """
        mkdir -p results/aligned
        mkdir -p results/logs/alignment

        hisat2 -p 8 \
            -x {params.index} \
            -1 {input.r1_trim} \
            -2 {input.r2_trim} \
            -S results/aligned/{wildcards.sample}.sam 2> {log}

        samtools sort -@ 8 -o {output.bam} results/aligned/{wildcards.sample}.sam
        samtools index {output.bam}
        rm results/aligned/{wildcards.sample}.sam
        """
