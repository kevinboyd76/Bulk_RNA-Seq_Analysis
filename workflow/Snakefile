configfile: "config/config.yml"

##################################################################
##                         Author Info                          ##
##################################################################

# Author: Kevin A. Boyd
# Email: kevinboyd76@gmail.com
# GitHub: https://github.com/kevinboyd76
# Date Created: June 23, 2025
# Last Modified: June 23, 2025
# Version: 1.0.0

##################################################################
##                    Define input functions                    ##
##################################################################

import os
import pandas as pd

# load samples table and set samples naming
samples_df = pd.read_csv("config/samples.csv").set_index("sample", drop=False)
SAMPLES = samples_df.index.tolist()

# dictionary based input function
def fq_dict_from_sample(wildcards):
    row = samples_df.loc[wildcards.sample]
    return {
        "r1": row["fastq1"],
        "r2": row["fastq2"]
    }

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # Raw QC
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.html", sample=SAMPLES),
        "results/qc/raw/multiqc/multiqc_report.html",
        
        # Trim R1 and R2 files
        expand("results/trimmed/{sample}_R1_trimmed.fastq.gz", sample=SAMPLES),
        expand("results/trimmed/{sample}_R2_trimmed.fastq.gz", sample=SAMPLES),
        
        # Trimmed QC
        expand("results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.html", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.html", sample=SAMPLES),
        "results/qc/trimmed/multiqc/multiqc_report.html",
        
        # Alignment and Index
        expand("results/aligned/{sample}.sorted.bam", sample=SAMPLES),
        expand("results/aligned/{sample}.sorted.bam.bai", sample=SAMPLES)

##################################################################
##                     FastQC on Raw Fastqs                     ##
##################################################################

rule fastqc_raw:
    input:
        unpack(fq_dict_from_sample)
    output:
        html1="results/qc/raw/fastqc/{sample}_R1_fastqc.html",
        html2="results/qc/raw/fastqc/{sample}_R2_fastqc.html",
        zip1 ="results/qc/raw/fastqc/{sample}_R1_fastqc.zip",
        zip2 ="results/qc/raw/fastqc/{sample}_R2_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_raw.log"
    shell:
        """
        fastqc -o results/qc/raw/fastqc {input.r1} {input.r2} 2> {log}
        """

##################################################################
##                    MultiQC on Raw Fastqs                    ##
##################################################################

rule multiqc_raw:
    input:
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.zip", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/raw/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/raw/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_raw.log"
    shell:
        """
        multiqc results/qc/raw/fastqc -o {params.outdir} 2> {log}
        """

##################################################################
##                      Adapter Trimming                        ##
##################################################################

rule trim_adapters:
    input:
        unpack(fq_dict_from_sample)
    output:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    params:
        adapters=config["TruSeq3_Adapters"]
    envmodules:
        config["cutadapt"]
    log:
        "results/logs/trim/{sample}.log"
    shell:
        """
        cutadapt \
            -a file:{params.adapters} \
            -A file:{params.adapters} \
            -o {output.r1_trim} \
            -p {output.r2_trim} \
            {input.r1} {input.r2} 2> {log}
        """

##################################################################
##                   FastQC on Trimmed Fastqs                   ##
##################################################################

rule fastqc_trimmed:
    input:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    output:
        html3="results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.html",
        html4="results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.html",
        zip3 ="results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.zip",
        zip4 ="results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_trimmed.log"
    shell:
        """
        fastqc -o results/qc/trimmed/fastqc {input.r1_trim} {input.r2_trim} 2> {log}
        """

##################################################################
##                  MultiQC on Trimmed Fastqs                  ##
##################################################################

rule multiqc_trimmed:
    input:
        expand("results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.zip", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/trimmed/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/trimmed/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_trimmed.log"
    shell:
        """
        multiqc results/qc/trimmed/fastqc -o {params.outdir} 2> {log}
        """

##################################################################
##                         HISAT2 Alignment                     ##
##################################################################

rule align_hisat2:
    input:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    output:
        bam="results/aligned/{sample}.sorted.bam",
        bai="results/aligned/{sample}.sorted.bam.bai"
    params:
        index=config["Hisat2_Index"]
    envmodules:
        config["hisat2"],
        config["samtools]
    log:
        "results/logs/alignment/{sample}.log"
    shell:
        """
        hisat2 -p 8 \
            -x {params.index} \
            -1 {input.r1_trim} \
            -2 {input.r2_trim} \
            -S results/aligned/{wildcards.sample}.sam 2> {log}

        samtools sort -@ 8 -o {output.bam} results/aligned/{wildcards.sample}.sam
        samtools index {output.bam}
        """
